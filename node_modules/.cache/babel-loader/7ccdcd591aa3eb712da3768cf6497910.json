{"ast":null,"code":"import _classCallCheck from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Input from './input';\nimport { INPUT_EVENT_TYPES } from '../constants';\nvar MOUSE_EVENTS = INPUT_EVENT_TYPES.MOUSE_EVENTS;\nvar MOVE_EVENT_TYPE = 'pointermove';\nvar OVER_EVENT_TYPE = 'pointerover';\nvar OUT_EVENT_TYPE = 'pointerout';\nvar ENTER_EVENT_TYPE = 'pointerenter';\nvar LEAVE_EVENT_TYPE = 'pointerleave';\n/**\n * Hammer.js swallows 'move' events (for pointer/touch/mouse)\n * when the pointer is not down. This class sets up a handler\n * specifically for these events to work around this limitation.\n * Note that this could be extended to more intelligently handle\n * move events across input types, e.g. storing multiple simultaneous\n * pointer/touch events, calculating speed/direction, etc.\n */\n\nvar MoveInput = /*#__PURE__*/function (_Input) {\n  _inherits(MoveInput, _Input);\n\n  var _super = _createSuper(MoveInput);\n\n  function MoveInput(element, callback, options) {\n    var _this;\n\n    _classCallCheck(this, MoveInput);\n\n    _this = _super.call(this, element, callback, options);\n\n    _this.handleEvent = function (event) {\n      _this.handleOverEvent(event);\n\n      _this.handleOutEvent(event);\n\n      _this.handleEnterEvent(event);\n\n      _this.handleLeaveEvent(event);\n\n      _this.handleMoveEvent(event);\n    };\n\n    _this.pressed = false;\n    var enable = _this.options.enable;\n    _this.enableMoveEvent = enable;\n    _this.enableLeaveEvent = enable;\n    _this.enableEnterEvent = enable;\n    _this.enableOutEvent = enable;\n    _this.enableOverEvent = enable;\n    _this.events = (_this.options.events || []).concat(MOUSE_EVENTS);\n\n    _this.events.forEach(function (event) {\n      return element.addEventListener(event, _this.handleEvent);\n    });\n\n    return _this;\n  }\n\n  _createClass(MoveInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this2 = this;\n\n      this.events.forEach(function (event) {\n        return _this2.element.removeEventListener(event, _this2.handleEvent);\n      });\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === MOVE_EVENT_TYPE) {\n        this.enableMoveEvent = enabled;\n      }\n\n      if (eventType === OVER_EVENT_TYPE) {\n        this.enableOverEvent = enabled;\n      }\n\n      if (eventType === OUT_EVENT_TYPE) {\n        this.enableOutEvent = enabled;\n      }\n\n      if (eventType === ENTER_EVENT_TYPE) {\n        this.enableEnterEvent = enabled;\n      }\n\n      if (eventType === LEAVE_EVENT_TYPE) {\n        this.enableLeaveEvent = enabled;\n      }\n    }\n  }, {\n    key: \"handleOverEvent\",\n    value: function handleOverEvent(event) {\n      if (this.enableOverEvent) {\n        if (event.type === 'mouseover') {\n          this._emit(OVER_EVENT_TYPE, event);\n        }\n      }\n    }\n  }, {\n    key: \"handleOutEvent\",\n    value: function handleOutEvent(event) {\n      if (this.enableOutEvent) {\n        if (event.type === 'mouseout') {\n          this._emit(OUT_EVENT_TYPE, event);\n        }\n      }\n    }\n  }, {\n    key: \"handleEnterEvent\",\n    value: function handleEnterEvent(event) {\n      if (this.enableEnterEvent) {\n        if (event.type === 'mouseenter') {\n          this._emit(ENTER_EVENT_TYPE, event);\n        }\n      }\n    }\n  }, {\n    key: \"handleLeaveEvent\",\n    value: function handleLeaveEvent(event) {\n      if (this.enableLeaveEvent) {\n        if (event.type === 'mouseleave') {\n          this._emit(LEAVE_EVENT_TYPE, event);\n        }\n      }\n    }\n  }, {\n    key: \"handleMoveEvent\",\n    value: function handleMoveEvent(event) {\n      if (this.enableMoveEvent) {\n        switch (event.type) {\n          case 'mousedown':\n            if (event.button >= 0) {\n              // Button is down\n              this.pressed = true;\n            }\n\n            break;\n\n          case 'mousemove':\n            // Move events use `which` to track the button being pressed\n            if (event.which === 0) {\n              // Button is not down\n              this.pressed = false;\n            }\n\n            if (!this.pressed) {\n              // Drag events are emitted by hammer already\n              // we just need to emit the move event on hover\n              this._emit(MOVE_EVENT_TYPE, event);\n            }\n\n            break;\n\n          case 'mouseup':\n            this.pressed = false;\n            break;\n\n          default:\n        }\n      }\n    }\n  }, {\n    key: \"_emit\",\n    value: function _emit(type, event) {\n      this.callback({\n        type: type,\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    }\n  }]);\n\n  return MoveInput;\n}(Input);\n\nexport { MoveInput as default };","map":{"version":3,"mappings":"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","names":["Input","INPUT_EVENT_TYPES","MOUSE_EVENTS","MOVE_EVENT_TYPE","OVER_EVENT_TYPE","OUT_EVENT_TYPE","ENTER_EVENT_TYPE","LEAVE_EVENT_TYPE","MoveInput","element","callback","options","event","handleOverEvent","handleOutEvent","handleEnterEvent","handleLeaveEvent","handleMoveEvent","pressed","enable","enableMoveEvent","enableLeaveEvent","enableEnterEvent","enableOutEvent","enableOverEvent","events","concat","forEach","addEventListener","handleEvent","removeEventListener","eventType","enabled","type","_emit","button","which","center","x","clientX","y","clientY","srcEvent","pointerType","target"],"sourceRoot":"","sources":["../../../src/inputs/move-input.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}