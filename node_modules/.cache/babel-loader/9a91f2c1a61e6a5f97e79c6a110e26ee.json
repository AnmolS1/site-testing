{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./Utils\";\nimport { deepExtend, itemFromArray } from \"../../Utils/Utils\";\nimport { getDistance, getDistances } from \"../../Utils/NumberUtils\";\nimport { Constants } from \"../../Core/Utils/Constants\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport var PolygonMaskInstance = /*#__PURE__*/function () {\n  function PolygonMaskInstance(container) {\n    _classCallCheck(this, PolygonMaskInstance);\n\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  _createClass(PolygonMaskInstance, [{\n    key: \"initAsync\",\n    value: function () {\n      var _initAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        var polygonMaskOptions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                polygonMaskOptions = this.options;\n                this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n                if (!polygonMaskOptions.enable) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.initRawData();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initAsync(_x) {\n        return _initAsync.apply(this, arguments);\n      }\n\n      return initAsync;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _this = this;\n\n      var container = this.container,\n          options = this.options;\n\n      if (!(options.enable && options.type !== \"none\")) {\n        return;\n      }\n\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n\n      this.redrawTimeout = window.setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.initRawData(true);\n\n              case 2:\n                _context2.next = 4;\n                return container.particles.redraw();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })), 250);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n  }, {\n    key: \"particlesInitialization\",\n    value: function particlesInitialization() {\n      var options = this.options;\n\n      if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n        this.drawPoints();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"particlePosition\",\n    value: function particlePosition(position) {\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n\n      return deepExtend({}, position ? position : this.randomPoint());\n    }\n  }, {\n    key: \"particleBounce\",\n    value: function particleBounce(particle, delta, direction) {\n      return this.polygonBounce(particle, delta, direction);\n    }\n  }, {\n    key: \"clickPositionValid\",\n    value: function clickPositionValid(position) {\n      var options = this.options;\n      return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _a;\n\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var options = this.options,\n          polygonDraw = options.draw;\n\n      if (!options.enable || !polygonDraw.enable) {\n        return;\n      }\n\n      var rawData = this.raw;\n\n      var _iterator = _createForOfIteratorHelper(this.paths),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          var path2d = path.path2d,\n              path2dSupported = this.path2DSupported;\n\n          if (!context) {\n            continue;\n          }\n\n          if (path2dSupported && path2d && this.offset) {\n            drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n          } else if (rawData) {\n            drawPolygonMask(context, rawData, polygonDraw.stroke);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"polygonBounce\",\n    value: function polygonBounce(particle, _delta, direction) {\n      var options = this.options;\n\n      if (!this.raw || !options.enable || direction !== \"top\") {\n        return false;\n      }\n\n      if (options.type === \"inside\" || options.type === \"outside\") {\n        var closest, dx, dy;\n        var pos = particle.getPosition(),\n            radius = particle.getRadius();\n\n        for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n          var pi = this.raw[i],\n              pj = this.raw[j];\n          closest = calcClosestPtOnSegment(pi, pj, pos);\n          var dist = getDistances(pos, closest);\n          var _ref2 = [dist.dx, dist.dy];\n          dx = _ref2[0];\n          dy = _ref2[1];\n\n          if (dist.distance < radius) {\n            segmentBounce(pi, pj, particle.velocity);\n            return true;\n          }\n        }\n\n        if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n          var factor = {\n            x: 1,\n            y: 1\n          };\n\n          if (particle.position.x >= closest.x) {\n            factor.x = -1;\n          }\n\n          if (particle.position.y >= closest.y) {\n            factor.y = -1;\n          }\n\n          particle.position.x = closest.x + radius * 2 * factor.x;\n          particle.position.y = closest.y + radius * 2 * factor.y;\n          particle.velocity.mult(-1);\n          return true;\n        }\n      } else if (options.type === \"inline\" && particle.initialPosition) {\n        var _dist = getDistance(particle.initialPosition, particle.getPosition());\n\n        if (_dist > this.polygonMaskMoveRadius) {\n          particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"checkInsidePolygon\",\n    value: function checkInsidePolygon(position) {\n      var _a, _b;\n\n      var container = this.container,\n          options = this.options;\n\n      if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n        return true;\n      }\n\n      if (!this.raw) {\n        throw new Error(Constants.noPolygonFound);\n      }\n\n      var canvasSize = container.canvas.size,\n          x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width,\n          y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      var inside = false;\n\n      for (var i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        var pi = this.raw[i],\n            pj = this.raw[j],\n            intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n\n      return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n    }\n  }, {\n    key: \"parseSvgPath\",\n    value: function parseSvgPath(xml, force) {\n      var _a, _b, _c;\n\n      var forceDownload = force !== null && force !== void 0 ? force : false;\n\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n\n      var container = this.container,\n          options = this.options,\n          parser = new DOMParser(),\n          doc = parser.parseFromString(xml, \"image/svg+xml\"),\n          svg = doc.getElementsByTagName(\"svg\")[0];\n      var svgPaths = svg.getElementsByTagName(\"path\");\n\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n\n      this.paths = [];\n\n      for (var i = 0; i < svgPaths.length; i++) {\n        var path = svgPaths.item(i);\n\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n\n      var pxRatio = container.retina.pixelRatio,\n          scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      var position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return parsePaths(this.paths, scale, this.offset);\n    }\n  }, {\n    key: \"downloadSvgPath\",\n    value: function () {\n      var _downloadSvgPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(svgUrl, force) {\n        var options, url, forceDownload, req;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n\n                if (!(!url || this.paths !== undefined && !forceDownload)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.raw);\n\n              case 3:\n                _context3.next = 5;\n                return fetch(url);\n\n              case 5:\n                req = _context3.sent;\n\n                if (req.ok) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n\n              case 8:\n                _context3.t0 = this;\n                _context3.next = 11;\n                return req.text();\n\n              case 11:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = force;\n                return _context3.abrupt(\"return\", _context3.t0.parseSvgPath.call(_context3.t0, _context3.t1, _context3.t2));\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function downloadSvgPath(_x2, _x3) {\n        return _downloadSvgPath.apply(this, arguments);\n      }\n\n      return downloadSvgPath;\n    }()\n  }, {\n    key: \"drawPoints\",\n    value: function drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.raw),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          this.container.particles.addParticle({\n            x: item.x,\n            y: item.y\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"randomPoint\",\n    value: function randomPoint() {\n      var container = this.container,\n          options = this.options;\n      var position;\n\n      if (options.type === \"inline\") {\n        switch (options.inline.arrangement) {\n          case \"random-point\":\n            position = this.getRandomPoint();\n            break;\n\n          case \"random-length\":\n            position = this.getRandomPointByLength();\n            break;\n\n          case \"equidistant\":\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n\n          case \"one-per-point\":\n          case \"per-point\":\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n  }, {\n    key: \"getRandomPoint\",\n    value: function getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants.noPolygonDataLoaded);\n      }\n\n      var coords = itemFromArray(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"getRandomPointByLength\",\n    value: function getRandomPointByLength() {\n      var _a, _b, _c;\n\n      var options = this.options;\n\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Constants.noPolygonDataLoaded);\n      }\n\n      var path = itemFromArray(this.paths),\n          distance = Math.floor(Math.random() * path.length) + 1,\n          point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n  }, {\n    key: \"getEquidistantPointByIndex\",\n    value: function getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      var options = this.container.actualOptions,\n          polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Constants.noPolygonDataLoaded);\n      var offset = 0,\n          point;\n      var totalLength = this.paths.reduce(function (tot, path) {\n        return tot + path.length;\n      }, 0),\n          distance = totalLength / options.particles.number.value;\n\n      var _iterator3 = _createForOfIteratorHelper(this.paths),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var path = _step3.value;\n          var pathDistance = distance * index - offset;\n\n          if (pathDistance <= path.length) {\n            point = path.element.getPointAtLength(pathDistance);\n            break;\n          } else {\n            offset += path.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n  }, {\n    key: \"getPointByIndex\",\n    value: function getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Constants.noPolygonDataLoaded);\n      }\n\n      var coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n  }, {\n    key: \"createPath2D\",\n    value: function createPath2D() {\n      var _this2 = this;\n\n      var _a, _b;\n\n      var options = this.options;\n\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.paths),\n          _step4;\n\n      try {\n        var _loop = function _loop() {\n          var path = _step4.value;\n          var pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n          if (pathData) {\n            var path2d = new Path2D(pathData),\n                matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n                finalPath = new Path2D(),\n                transform = matrix.scale(options.scale);\n\n            if (finalPath.addPath) {\n              finalPath.addPath(path2d, transform);\n              path.path2d = finalPath;\n            } else {\n              delete path.path2d;\n            }\n          } else {\n            delete path.path2d;\n          }\n\n          if (path.path2d || !_this2.raw) {\n            return \"continue\";\n          }\n\n          path.path2d = new Path2D();\n          path.path2d.moveTo(_this2.raw[0].x, _this2.raw[0].y);\n\n          _this2.raw.forEach(function (pos, i) {\n            var _a;\n\n            if (i > 0) {\n              (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n            }\n          });\n\n          path.path2d.closePath();\n        };\n\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"initRawData\",\n    value: function () {\n      var _initRawData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(force) {\n        var options, data, svg, path, namespaces;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = this.options;\n\n                if (!options.url) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this.downloadSvgPath(options.url, force);\n\n              case 4:\n                this.raw = _context4.sent;\n                _context4.next = 8;\n                break;\n\n              case 7:\n                if (options.data) {\n                  data = options.data;\n\n                  if (typeof data !== \"string\") {\n                    path = data.path instanceof Array ? data.path.map(function (t) {\n                      return \"<path d=\\\"\".concat(t, \"\\\" />\");\n                    }).join(\"\") : \"<path d=\\\"\".concat(data.path, \"\\\" />\");\n                    namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = \"<svg \".concat(namespaces, \" width=\\\"\").concat(data.size.width, \"\\\" height=\\\"\").concat(data.size.height, \"\\\">\").concat(path, \"</svg>\");\n                  } else {\n                    svg = data;\n                  }\n\n                  this.raw = this.parseSvgPath(svg, force);\n                }\n\n              case 8:\n                this.createPath2D();\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function initRawData(_x4) {\n        return _initRawData.apply(this, arguments);\n      }\n\n      return initRawData;\n    }()\n  }]);\n\n  return PolygonMaskInstance;\n}();","map":{"version":3,"names":["calcClosestPtOnSegment","drawPolygonMask","drawPolygonMaskPath","parsePaths","segmentBounce","deepExtend","itemFromArray","getDistance","getDistances","Constants","PolygonMask","PolygonMaskInstance","container","dimension","height","width","path2DSupported","window","Path2D","options","polygonMaskMoveRadius","move","radius","retina","pixelRatio","load","polygon","polygonMaskOptions","enable","initRawData","type","redrawTimeout","clearTimeout","setTimeout","particles","redraw","raw","paths","inline","arrangement","drawPoints","position","_a","_b","length","randomPoint","particle","delta","direction","polygonBounce","checkInsidePolygon","context","polygonDraw","draw","rawData","path","path2d","path2dSupported","offset","stroke","_delta","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","dist","distance","velocity","undefined","factor","x","y","mult","initialPosition","Error","noPolygonFound","canvasSize","canvas","size","Math","random","inside","intersect","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","svgUrl","url","fetch","req","ok","text","parseSvgPath","addParticle","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","value","pathDistance","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","downloadSvgPath","data","Array","map","t","join","namespaces","createPath2D"],"sources":["/Users/anmolu/GitHub/testing-site/node_modules/tsparticles/esm/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["import { calcClosestPtOnSegment, drawPolygonMask, drawPolygonMaskPath, parsePaths, segmentBounce } from \"./Utils\";\nimport { deepExtend, itemFromArray } from \"../../Utils/Utils\";\nimport { getDistance, getDistances } from \"../../Utils/NumberUtils\";\nimport { Constants } from \"../../Core/Utils/Constants\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nexport class PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container, options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return deepExtend({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options, polygonDraw = options.draw;\n        if (!options.enable || !polygonDraw.enable) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d, path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = calcClosestPtOnSegment(pi, pj, pos);\n                const dist = getDistances(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    segmentBounce(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container, options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size, x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container, options = this.options, parser = new DOMParser(), doc = parser.parseFromString(xml, \"image/svg+xml\"), svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio, scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return parsePaths(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container, options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const coords = itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const path = itemFromArray(this.paths), distance = Math.floor(Math.random() * path.length) + 1, point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions, polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Constants.noPolygonDataLoaded);\n        let offset = 0, point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0), distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData), matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}