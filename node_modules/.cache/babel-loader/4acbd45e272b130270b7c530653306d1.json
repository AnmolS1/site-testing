{"ast":null,"code":"import _toConsumableArray from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { createMat4 } from './math-utils';\nimport { zoomToScale, pixelsToWorld, lngLatToWorld, worldToLngLat, worldToPixels, altitudeToFovy, fovyToAltitude, DEFAULT_ALTITUDE, getProjectionMatrix, getDistanceScales, getViewMatrix } from './web-mercator-utils';\nimport _fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\nvar WebMercatorViewport = /*#__PURE__*/function () {\n  function WebMercatorViewport() {\n    var _this = this;\n\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      width: 1,\n      height: 1\n    };\n\n    _classCallCheck(this, WebMercatorViewport);\n\n    _defineProperty(this, \"latitude\", void 0);\n\n    _defineProperty(this, \"longitude\", void 0);\n\n    _defineProperty(this, \"zoom\", void 0);\n\n    _defineProperty(this, \"pitch\", void 0);\n\n    _defineProperty(this, \"bearing\", void 0);\n\n    _defineProperty(this, \"altitude\", void 0);\n\n    _defineProperty(this, \"fovy\", void 0);\n\n    _defineProperty(this, \"meterOffset\", void 0);\n\n    _defineProperty(this, \"center\", void 0);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"scale\", void 0);\n\n    _defineProperty(this, \"distanceScales\", void 0);\n\n    _defineProperty(this, \"viewMatrix\", void 0);\n\n    _defineProperty(this, \"projectionMatrix\", void 0);\n\n    _defineProperty(this, \"viewProjectionMatrix\", void 0);\n\n    _defineProperty(this, \"pixelProjectionMatrix\", void 0);\n\n    _defineProperty(this, \"pixelUnprojectionMatrix\", void 0);\n\n    _defineProperty(this, \"equals\", function (viewport) {\n      if (!(viewport instanceof WebMercatorViewport)) {\n        return false;\n      }\n\n      return viewport.width === _this.width && viewport.height === _this.height && mat4.equals(viewport.projectionMatrix, _this.projectionMatrix) && mat4.equals(viewport.viewMatrix, _this.viewMatrix);\n    });\n\n    _defineProperty(this, \"project\", function (lngLatZ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$topLeft = options.topLeft,\n          topLeft = _options$topLeft === void 0 ? true : _options$topLeft;\n\n      var worldPosition = _this.projectPosition(lngLatZ);\n\n      var coord = worldToPixels(worldPosition, _this.pixelProjectionMatrix);\n\n      var _coord = _slicedToArray(coord, 2),\n          x = _coord[0],\n          y = _coord[1];\n\n      var y2 = topLeft ? y : _this.height - y;\n      return lngLatZ.length === 2 ? [x, y2] : [x, y2, coord[2]];\n    });\n\n    _defineProperty(this, \"unproject\", function (xyz) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$topLeft2 = options.topLeft,\n          topLeft = _options$topLeft2 === void 0 ? true : _options$topLeft2,\n          _options$targetZ = options.targetZ,\n          targetZ = _options$targetZ === void 0 ? undefined : _options$targetZ;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x = _xyz[0],\n          y = _xyz[1],\n          z = _xyz[2];\n\n      var y2 = topLeft ? y : _this.height - y;\n      var targetZWorld = targetZ && targetZ * _this.distanceScales.unitsPerMeter[2];\n      var coord = pixelsToWorld([x, y2, z], _this.pixelUnprojectionMatrix, targetZWorld);\n\n      var _this$unprojectPositi = _this.unprojectPosition(coord),\n          _this$unprojectPositi2 = _slicedToArray(_this$unprojectPositi, 3),\n          X = _this$unprojectPositi2[0],\n          Y = _this$unprojectPositi2[1],\n          Z = _this$unprojectPositi2[2];\n\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    });\n\n    _defineProperty(this, \"projectPosition\", function (xyz) {\n      var _lngLatToWorld = lngLatToWorld(xyz),\n          _lngLatToWorld2 = _slicedToArray(_lngLatToWorld, 2),\n          X = _lngLatToWorld2[0],\n          Y = _lngLatToWorld2[1];\n\n      var Z = (xyz[2] || 0) * _this.distanceScales.unitsPerMeter[2];\n      return [X, Y, Z];\n    });\n\n    _defineProperty(this, \"unprojectPosition\", function (xyz) {\n      var _worldToLngLat = worldToLngLat(xyz),\n          _worldToLngLat2 = _slicedToArray(_worldToLngLat, 2),\n          X = _worldToLngLat2[0],\n          Y = _worldToLngLat2[1];\n\n      var Z = (xyz[2] || 0) * _this.distanceScales.metersPerUnit[2];\n      return [X, Y, Z];\n    });\n\n    var width = props.width,\n        height = props.height,\n        _props$altitude = props.altitude,\n        altitude = _props$altitude === void 0 ? null : _props$altitude,\n        _props$fovy = props.fovy,\n        fovy = _props$fovy === void 0 ? null : _props$fovy;\n    var _props$latitude = props.latitude,\n        latitude = _props$latitude === void 0 ? 0 : _props$latitude,\n        _props$longitude = props.longitude,\n        longitude = _props$longitude === void 0 ? 0 : _props$longitude,\n        _props$zoom = props.zoom,\n        zoom = _props$zoom === void 0 ? 0 : _props$zoom,\n        _props$pitch = props.pitch,\n        pitch = _props$pitch === void 0 ? 0 : _props$pitch,\n        _props$bearing = props.bearing,\n        bearing = _props$bearing === void 0 ? 0 : _props$bearing,\n        _props$position = props.position,\n        position = _props$position === void 0 ? null : _props$position,\n        _props$nearZMultiplie = props.nearZMultiplier,\n        nearZMultiplier = _props$nearZMultiplie === void 0 ? 0.02 : _props$nearZMultiplie,\n        _props$farZMultiplier = props.farZMultiplier,\n        farZMultiplier = _props$farZMultiplier === void 0 ? 1.01 : _props$farZMultiplier;\n    width = width || 1;\n    height = height || 1;\n\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    var scale = zoomToScale(zoom);\n    altitude = Math.max(0.75, altitude);\n    var distanceScales = getDistanceScales({\n      longitude: longitude,\n      latitude: latitude\n    });\n    var center = lngLatToWorld([longitude, latitude]);\n    center.push(0);\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width: width,\n      height: height,\n      pitch: pitch,\n      fovy: fovy,\n      nearZMultiplier: nearZMultiplier,\n      farZMultiplier: farZMultiplier\n    });\n    this.viewMatrix = getViewMatrix({\n      height: height,\n      scale: scale,\n      center: center,\n      pitch: pitch,\n      bearing: bearing,\n      altitude: altitude\n    });\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    Object.freeze(this);\n  }\n\n  _createClass(WebMercatorViewport, [{\n    key: \"_initMatrices\",\n    value: function _initMatrices() {\n      var width = this.width,\n          height = this.height,\n          projectionMatrix = this.projectionMatrix,\n          viewMatrix = this.viewMatrix;\n      var vpm = createMat4();\n      mat4.multiply(vpm, vpm, projectionMatrix);\n      mat4.multiply(vpm, vpm, viewMatrix);\n      this.viewProjectionMatrix = vpm;\n      var m = createMat4();\n      mat4.scale(m, m, [width / 2, -height / 2, 1]);\n      mat4.translate(m, m, [1, -1, 0]);\n      mat4.multiply(m, m, vpm);\n      var mInverse = mat4.invert(createMat4(), m);\n\n      if (!mInverse) {\n        throw new Error('Pixel project matrix not invertible');\n      }\n\n      this.pixelProjectionMatrix = m;\n      this.pixelUnprojectionMatrix = mInverse;\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat) {\n      return lngLatToWorld(lngLat);\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xy) {\n      return worldToLngLat(xy);\n    }\n  }, {\n    key: \"getMapCenterByLngLatPosition\",\n    value: function getMapCenterByLngLatPosition(_ref) {\n      var lngLat = _ref.lngLat,\n          pos = _ref.pos;\n      var fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n      var toLocation = lngLatToWorld(lngLat);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return worldToLngLat(newCenter);\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = this.width,\n          height = this.height;\n\n      var _fitBounds2 = _fitBounds(Object.assign({\n        width: width,\n        height: height,\n        bounds: bounds\n      }, options)),\n          longitude = _fitBounds2.longitude,\n          latitude = _fitBounds2.latitude,\n          zoom = _fitBounds2.zoom;\n\n      return new WebMercatorViewport({\n        width: width,\n        height: height,\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(options) {\n      var corners = this.getBoundingRegion(options);\n      var west = Math.min.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[0];\n      })));\n      var east = Math.max.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[0];\n      })));\n      var south = Math.min.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[1];\n      })));\n      var north = Math.max.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[1];\n      })));\n      return [[west, south], [east, north]];\n    }\n  }, {\n    key: \"getBoundingRegion\",\n    value: function getBoundingRegion() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return getBounds(this, options.z || 0);\n    }\n  }, {\n    key: \"getLocationAtPoint\",\n    value: function getLocationAtPoint(_ref2) {\n      var lngLat = _ref2.lngLat,\n          pos = _ref2.pos;\n      return this.getMapCenterByLngLatPosition({\n        lngLat: lngLat,\n        pos: pos\n      });\n    }\n  }]);\n\n  return WebMercatorViewport;\n}();\n\nexport { WebMercatorViewport as default };","map":{"version":3,"mappings":"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","names":["createMat4","zoomToScale","pixelsToWorld","lngLatToWorld","worldToLngLat","worldToPixels","altitudeToFovy","fovyToAltitude","DEFAULT_ALTITUDE","getProjectionMatrix","getDistanceScales","getViewMatrix","fitBounds","getBounds","mat4","vec2","vec3","WebMercatorViewport","constructor","props","width","height","_defineProperty","viewport","equals","projectionMatrix","viewMatrix","lngLatZ","options","topLeft","worldPosition","projectPosition","coord","pixelProjectionMatrix","x","y","y2","length","xyz","targetZ","undefined","z","targetZWorld","distanceScales","unitsPerMeter","pixelUnprojectionMatrix","unprojectPosition","X","Y","Z","Number","isFinite","metersPerUnit","altitude","fovy","latitude","longitude","zoom","pitch","bearing","position","nearZMultiplier","farZMultiplier","scale","Math","max","center","push","add","mul","meterOffset","_initMatrices","Object","freeze","vpm","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","projectFlat","lngLat","unprojectFlat","xy","getMapCenterByLngLatPosition","pos","fromLocation","toLocation","negate","newCenter","bounds","assign","corners","getBoundingRegion","west","min","map","p","east","south","north","getLocationAtPoint"],"sources":["../../src/web-mercator-viewport.ts"],"sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  altitudeToFovy,\n  fovyToAltitude,\n  DEFAULT_ALTITUDE,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix,\n  DistanceScales\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport type {FitBoundsOptions} from './fit-bounds';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\n/**\n   * @param width=1 - Width of \"viewport\" or window\n   * @param height=1 - Height of \"viewport\" or window\n   * @param scale=1 - Either use scale or zoom\n   * @param pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param fovy= - Field of view of camera in degrees\n   * @param altitude= - Altitude of camera in screen units                                                               \n   *\n   * Web mercator projection short-hand parameters\n   * @param latitude - Center of viewport on map\n   * @param longitude - Center of viewport on map\n   * @param zoom - Scale = Math.pow(2,zoom) on map\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - Field of view is independent from altitude, provide `altitudeToFovy(1.5)` (default value) to match assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n */\nexport type WebMercatorViewportProps = {\n  // Map state\n  width: number;\n  height: number;\n  latitude?: number;\n  longitude?: number;\n  position?: number[];\n  zoom?: number;\n  pitch?: number;\n  bearing?: number;\n  altitude?: number;\n  fovy?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n};\n\n/**\n * The WebMercatorViewport class creates\n * - view/projection matrices\n * - \"uniform values\" (for shaders) from mercator params\n *\n * Note: Instances are immutable in the sense that they only have accessors.\n * A new viewport instance should be created if any parameters have changed.\n */\nexport default class WebMercatorViewport {\n  readonly latitude: number;\n  readonly longitude: number;\n  readonly zoom: number;\n  readonly pitch: number;\n  readonly bearing: number;\n  readonly altitude: number;\n  readonly fovy: number;\n\n  readonly meterOffset: number[];\n  readonly center: number[];\n\n  readonly width: number;\n  readonly height: number;\n  readonly scale: number;\n  readonly distanceScales: DistanceScales;\n\n  readonly viewMatrix: number[];\n  readonly projectionMatrix: number[];\n\n  viewProjectionMatrix: number[];\n  pixelProjectionMatrix: number[];\n  pixelUnprojectionMatrix: number[];\n\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  // eslint-disable-next-line max-statements\n  constructor(props: WebMercatorViewportProps = {width: 1, height: 1}) {\n    let {\n      // Map state\n      width,\n      height,\n      altitude = null,\n      fovy = null\n    } = props;\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = props;\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // `fovy` & `altitude` are independent parameters, one for the\n    // projection and the latter for the view matrix. In the past,\n    // the `fovy` was always derived from the `altitude`\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const distanceScales = getDistanceScales({longitude, latitude});\n\n    const center = lngLatToWorld([longitude, latitude]);\n    center.push(0);\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    Object.freeze(this);\n  }\n\n  _initMatrices(): void {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  /** Two viewports are equal if width and height are identical, and if\n   * their view and projection matrices are (approximately) equal.\n   */\n  equals = (viewport: WebMercatorViewport | null): boolean => {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  };\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @return - screen coordinates [x, y] or [x, y, z], z as pixel depth\n   */\n  project = (lngLatZ: number[], options: {topLeft?: boolean} = {}): number[] => {\n    const {topLeft = true} = options;\n    const worldPosition = this.projectPosition(lngLatZ);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return lngLatZ.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  };\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates, possibly `[lon, lat]` on map.\n   *\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   *\n   * @param xyz - screen coordinates, z as pixel depth\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @param options.targetZ=0 - If pixel depth is unknown, targetZ is used as\n   *   the elevation plane to unproject onto\n   * @return - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject = (xyz: number[], options: {topLeft?: boolean; targetZ?: number} = {}): number[] => {\n    const {topLeft = true, targetZ = undefined} = options;\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  };\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  };\n\n  unprojectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  };\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return [x,y] coordinates.\n   */\n  projectFlat(lngLat: number[]): number[] {\n    return lngLatToWorld(lngLat);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param xy - array with [x,y] members\n   *  representing point on projected map plane\n   * @return - array with [lat,lon] of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy: number[]): number[] {\n    return worldToLngLat(xy);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n   * @param opt\n   * @param opt.lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param opt.pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    return worldToLngLat(newCenter);\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param bounds - [[lon, lat], [lon, lat]]\n   * @param [options]\n   * @param [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(\n    bounds: [[number, number], [number, number]],\n    options: Omit<FitBoundsOptions, 'width' | 'height' | 'bounds'> = {}\n  ): WebMercatorViewport {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} bounds - [[lon, lat], [lon, lat]]\n   */\n  getBounds(options?: {z?: number}): number[][] {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map((p) => p[0]));\n    const east = Math.max(...corners.map((p) => p[0]));\n    const south = Math.min(...corners.map((p) => p[1]));\n    const north = Math.max(...corners.map((p) => p[1]));\n    return [\n      [west, south],\n      [east, north]\n    ];\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} an array of 4 points that define the visible region\n   */\n  getBoundingRegion(options: {z?: number} = {}): number[][] {\n    return getBounds(this, options.z || 0);\n  }\n\n  // DEPRECATED\n\n  /** @deprecated Legacy method name */\n  getLocationAtPoint({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}