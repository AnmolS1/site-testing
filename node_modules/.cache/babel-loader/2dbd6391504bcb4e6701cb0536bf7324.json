{"ast":null,"code":"import _objectSpread from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { lerp } from './math-utils';\nimport { scaleToZoom, zoomToScale, lngLatToWorld, worldToLngLat } from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\nvar EPSILON = 0.01;\nvar VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'];\nvar DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n};\nexport default function flyToViewport(startProps, endProps, t, options) {\n  var _getFlyToTransitionPa = getFlyToTransitionParams(startProps, endProps, options),\n      startZoom = _getFlyToTransitionPa.startZoom,\n      startCenterXY = _getFlyToTransitionPa.startCenterXY,\n      uDelta = _getFlyToTransitionPa.uDelta,\n      w0 = _getFlyToTransitionPa.w0,\n      u1 = _getFlyToTransitionPa.u1,\n      S = _getFlyToTransitionPa.S,\n      rho = _getFlyToTransitionPa.rho,\n      rho2 = _getFlyToTransitionPa.rho2,\n      r0 = _getFlyToTransitionPa.r0;\n\n  if (u1 < EPSILON) {\n    var viewport = {};\n\n    var _iterator = _createForOfIteratorHelper(VIEWPORT_TRANSITION_PROPS),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var startValue = startProps[key];\n        var endValue = endProps[key];\n        viewport[key] = lerp(startValue, endValue, t);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return viewport;\n  }\n\n  var s = t * S;\n  var w = Math.cosh(r0) / Math.cosh(r0 + rho * s);\n  var u = w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2) / u1;\n  var scaleIncrement = 1 / w;\n  var newZoom = startZoom + scaleToZoom(scaleIncrement);\n  var newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n  var newCenter = worldToLngLat(newCenterWorld);\n  return {\n    longitude: newCenter[0],\n    latitude: newCenter[1],\n    zoom: newZoom\n  };\n}\nexport function getFlyToDuration(startProps, endProps, options) {\n  var opts = _objectSpread(_objectSpread({}, DEFAULT_OPTS), options);\n\n  var screenSpeed = opts.screenSpeed,\n      speed = opts.speed,\n      maxDuration = opts.maxDuration;\n\n  var _getFlyToTransitionPa2 = getFlyToTransitionParams(startProps, endProps, opts),\n      S = _getFlyToTransitionPa2.S,\n      rho = _getFlyToTransitionPa2.rho;\n\n  var length = 1000 * S;\n  var duration;\n\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\n\nfunction getFlyToTransitionParams(startProps, endProps, opts) {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  var rho = opts.curve;\n  var startZoom = startProps.zoom;\n  var startCenter = [startProps.longitude, startProps.latitude];\n  var startScale = zoomToScale(startZoom);\n  var endZoom = endProps.zoom;\n  var endCenter = [endProps.longitude, endProps.latitude];\n  var scale = zoomToScale(endZoom - startZoom);\n  var startCenterXY = lngLatToWorld(startCenter);\n  var endCenterXY = lngLatToWorld(endCenter);\n  var uDelta = vec2.sub([], endCenterXY, startCenterXY);\n  var w0 = Math.max(startProps.width, startProps.height);\n  var w1 = w0 / scale;\n  var u1 = vec2.length(uDelta) * startScale;\n\n  var _u1 = Math.max(u1, EPSILON);\n\n  var rho2 = rho * rho;\n  var b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  var b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  var r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  var r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  var S = (r1 - r0) / rho;\n  return {\n    startZoom: startZoom,\n    startCenterXY: startCenterXY,\n    uDelta: uDelta,\n    w0: w0,\n    u1: u1,\n    S: S,\n    rho: rho,\n    rho2: rho2,\n    r0: r0,\n    r1: r1\n  };\n}","map":{"version":3,"mappings":"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","names":["lerp","scaleToZoom","zoomToScale","lngLatToWorld","worldToLngLat","vec2","EPSILON","VIEWPORT_TRANSITION_PROPS","DEFAULT_OPTS","curve","speed","flyToViewport","startProps","endProps","t","options","getFlyToTransitionParams","startZoom","startCenterXY","uDelta","w0","u1","S","rho","rho2","r0","viewport","key","startValue","endValue","s","w","Math","cosh","u","tanh","sinh","scaleIncrement","newZoom","newCenterWorld","scale","add","newCenter","longitude","latitude","zoom","getFlyToDuration","opts","screenSpeed","maxDuration","length","duration","Number","isFinite","Object","assign","startCenter","startScale","endZoom","endCenter","endCenterXY","sub","max","width","height","w1","_u1","b0","b1","log","sqrt","r1"],"sources":["../../src/fly-to-viewport.ts"],"sourcesContent":["import {lerp} from './math-utils';\nimport {scaleToZoom, zoomToScale, lngLatToWorld, worldToLngLat} from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\n\nimport type {ViewportProps} from './normalize-viewport-props';\n\nconst EPSILON = 0.01;\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'] as const;\nconst DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n  // screenSpeed and maxDuration are used only if specified\n};\n\nexport type FlytoTransitionOptions = {\n  curve?: number;\n  speed?: number;\n  screenSpeed?: number;\n  maxDuration?: number;\n};\n\n/**\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default function flyToViewport(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  t: number,\n  options?: FlytoTransitionOptions\n): {\n  longitude: number;\n  latitude: number;\n  zoom: number;\n} {\n  // Equations from above paper are referred where needed.\n\n  const {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0} = getFlyToTransitionParams(\n    startProps,\n    endProps,\n    options\n  );\n\n  // If change in center is too small, do linear interpolaiton.\n  if (u1 < EPSILON) {\n    const viewport = {};\n    for (const key of VIEWPORT_TRANSITION_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      viewport[key] = lerp(startValue, endValue, t);\n    }\n    // @ts-expect-error properties are populated dynamically\n    return viewport;\n  }\n\n  const s = t * S;\n\n  const w = Math.cosh(r0) / Math.cosh(r0 + rho * s);\n  const u = (w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2)) / u1;\n\n  const scaleIncrement = 1 / w; // Using w method for scaling.\n  const newZoom = startZoom + scaleToZoom(scaleIncrement);\n\n  const newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n\n  const newCenter = worldToLngLat(newCenterWorld);\n  return {\n    longitude: newCenter[0],\n    latitude: newCenter[1],\n    zoom: newZoom\n  };\n}\n\n// returns transition duration in milliseconds\nexport function getFlyToDuration(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  options?: FlytoTransitionOptions\n): number {\n  const opts = {...DEFAULT_OPTS, ...options};\n  const {screenSpeed, speed, maxDuration} = opts;\n  const {S, rho} = getFlyToTransitionParams(startProps, endProps, opts);\n  const length = 1000 * S;\n  let duration: number;\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\n\n// Private Methods\n\n// Calculate all parameters that are static for given startProps and endProps\nfunction getFlyToTransitionParams(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  opts: FlytoTransitionOptions\n): {\n  startZoom: number;\n  startCenterXY: number[];\n  uDelta: number[];\n  w0: number;\n  u1: number;\n  S: number;\n  rho: number;\n  rho2: number;\n  r0: number;\n  r1: number;\n} {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  const rho = opts.curve;\n  const startZoom = startProps.zoom;\n  const startCenter = [startProps.longitude, startProps.latitude];\n  const startScale = zoomToScale(startZoom);\n  const endZoom = endProps.zoom;\n  const endCenter = [endProps.longitude, endProps.latitude];\n  const scale = zoomToScale(endZoom - startZoom);\n\n  const startCenterXY = lngLatToWorld(startCenter);\n  const endCenterXY = lngLatToWorld(endCenter);\n  const uDelta = vec2.sub([] as number[], endCenterXY, startCenterXY);\n\n  const w0 = Math.max(startProps.width, startProps.height);\n  const w1 = w0 / scale;\n  const u1 = vec2.length(uDelta) * startScale;\n  // u0 is treated as '0' in Eq (9).\n\n  // If u1 is too small, will generate invalid number\n  const _u1 = Math.max(u1, EPSILON);\n\n  // Implement Equation (9) from above algorithm.\n  const rho2 = rho * rho;\n  const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  const S = (r1 - r0) / rho;\n\n  return {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0, r1};\n}\n"]},"metadata":{},"sourceType":"module"}