{"ast":null,"code":"import _slicedToArray from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Manager } from './utils/hammer';\nimport WheelInput from './inputs/wheel-input';\nimport MoveInput from './inputs/move-input';\nimport KeyInput from './inputs/key-input';\nimport ContextmenuInput from './inputs/contextmenu-input';\nimport EventRegistrar from './utils/event-registrar';\nimport { BASIC_EVENT_ALIASES, EVENT_RECOGNIZER_MAP, GESTURE_EVENT_ALIASES, RECOGNIZERS, RECOGNIZER_COMPATIBLE_MAP, RECOGNIZER_FALLBACK_MAP } from './constants';\nvar DEFAULT_OPTIONS = {\n  // event handlers\n  events: null,\n  // custom recognizers\n  recognizers: null,\n  recognizerOptions: {},\n  // Manager class\n  Manager: Manager,\n  // allow browser default touch action\n  // https://github.com/uber/react-map-gl/issues/506\n  touchAction: 'none',\n  tabIndex: 0\n}; // Unified API for subscribing to events about both\n// basic input events (e.g. 'mousemove', 'touchstart', 'wheel')\n// and gestural input (e.g. 'click', 'tap', 'panstart').\n// Delegates gesture related event registration and handling to Hammer.js.\n\nvar EventManager = /*#__PURE__*/function () {\n  function EventManager() {\n    var _this = this;\n\n    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var options = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, EventManager);\n\n    /**\n     * Handle basic events using the 'hammer.input' Hammer.js API:\n     * Before running Recognizers, Hammer emits a 'hammer.input' event\n     * with the basic event info. This function emits all basic events\n     * aliased to the \"class\" of event received.\n     * See constants.BASIC_EVENT_CLASSES basic event class definitions.\n     */\n    this._onBasicInput = function (event) {\n      var srcEvent = event.srcEvent;\n      var alias = BASIC_EVENT_ALIASES[srcEvent.type];\n\n      if (alias) {\n        // fire all events aliased to srcEvent.type\n        _this.manager.emit(alias, event);\n      }\n    };\n    /**\n     * Handle events not supported by Hammer.js,\n     * and pipe back out through same (Hammer) channel used by other events.\n     */\n\n\n    this._onOtherEvent = function (event) {\n      // console.log('onotherevent', event.type, event)\n      _this.manager.emit(event.type, event);\n    };\n\n    this.options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n    this.events = new Map();\n    this.setElement(element); // Register all passed events.\n\n    var events = this.options.events;\n\n    if (events) {\n      this.on(events);\n    }\n  }\n\n  _createClass(EventManager, [{\n    key: \"getElement\",\n    value: function getElement() {\n      return this.element;\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(element) {\n      var _this2 = this;\n\n      if (this.element) {\n        // unregister all events\n        this.destroy();\n      }\n\n      this.element = element;\n\n      if (!element) {\n        return;\n      }\n\n      var options = this.options;\n      var ManagerClass = options.Manager;\n      this.manager = new ManagerClass(element, {\n        touchAction: options.touchAction,\n        recognizers: options.recognizers || RECOGNIZERS\n      }).on('hammer.input', this._onBasicInput);\n\n      if (!options.recognizers) {\n        // Set default recognize withs\n        // http://hammerjs.github.io/recognize-with/\n        Object.keys(RECOGNIZER_COMPATIBLE_MAP).forEach(function (name) {\n          var recognizer = _this2.manager.get(name);\n\n          if (recognizer) {\n            RECOGNIZER_COMPATIBLE_MAP[name].forEach(function (otherName) {\n              recognizer.recognizeWith(otherName);\n            });\n          }\n        });\n      } // Set recognizer options\n\n\n      for (var recognizerName in options.recognizerOptions) {\n        var recognizer = this.manager.get(recognizerName);\n\n        if (recognizer) {\n          var recognizerOption = options.recognizerOptions[recognizerName]; // `enable` is managed by the event registrations\n\n          delete recognizerOption.enable;\n          recognizer.set(recognizerOption);\n        }\n      } // Handle events not handled by Hammer.js:\n      // - mouse wheel\n      // - pointer/touch/mouse move\n\n\n      this.wheelInput = new WheelInput(element, this._onOtherEvent, {\n        enable: false\n      });\n      this.moveInput = new MoveInput(element, this._onOtherEvent, {\n        enable: false\n      });\n      this.keyInput = new KeyInput(element, this._onOtherEvent, {\n        enable: false,\n        tabIndex: options.tabIndex\n      });\n      this.contextmenuInput = new ContextmenuInput(element, this._onOtherEvent, {\n        enable: false\n      }); // Register all existing events\n\n      var _iterator = _createForOfIteratorHelper(this.events),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              eventAlias = _step$value[0],\n              eventRegistrar = _step$value[1];\n\n          if (!eventRegistrar.isEmpty()) {\n            // Enable recognizer for this event.\n            this._toggleRecognizer(eventRegistrar.recognizerName, true);\n\n            this.manager.on(eventAlias, eventRegistrar.handleEvent);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } // Tear down internal event management implementations.\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.element) {\n        // wheelInput etc. are created in setElement() and therefore\n        // cannot exist if there is no element\n        this.wheelInput.destroy();\n        this.moveInput.destroy();\n        this.keyInput.destroy();\n        this.contextmenuInput.destroy();\n        this.manager.destroy();\n        this.wheelInput = null;\n        this.moveInput = null;\n        this.keyInput = null;\n        this.contextmenuInput = null;\n        this.manager = null;\n        this.element = null;\n      }\n    }\n    /** Register an event handler function to be called on `event` */\n\n  }, {\n    key: \"on\",\n    value: function on(event, handler, opts) {\n      this._addEventHandler(event, handler, opts, false);\n    }\n  }, {\n    key: \"once\",\n    value: function once(event, handler, opts) {\n      this._addEventHandler(event, handler, opts, true);\n    }\n  }, {\n    key: \"watch\",\n    value: function watch(event, handler, opts) {\n      this._addEventHandler(event, handler, opts, false, true);\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, handler) {\n      this._removeEventHandler(event, handler);\n    }\n    /*\n     * Enable/disable recognizer for the given event\n     */\n\n  }, {\n    key: \"_toggleRecognizer\",\n    value: function _toggleRecognizer(name, enabled) {\n      var manager = this.manager;\n\n      if (!manager) {\n        return;\n      }\n\n      var recognizer = manager.get(name); // @ts-ignore\n\n      if (recognizer && recognizer.options.enable !== enabled) {\n        recognizer.set({\n          enable: enabled\n        });\n        var fallbackRecognizers = RECOGNIZER_FALLBACK_MAP[name];\n\n        if (fallbackRecognizers && !this.options.recognizers) {\n          // Set default require failures\n          // http://hammerjs.github.io/require-failure/\n          fallbackRecognizers.forEach(function (otherName) {\n            var otherRecognizer = manager.get(otherName);\n\n            if (enabled) {\n              // Wait for this recognizer to fail\n              otherRecognizer.requireFailure(name);\n              /**\n               * This seems to be a bug in hammerjs:\n               * requireFailure() adds both ways\n               * dropRequireFailure() only drops one way\n               * https://github.com/hammerjs/hammer.js/blob/master/src/recognizerjs/\n                 recognizer-constructor.js#L136\n               */\n\n              recognizer.dropRequireFailure(otherName);\n            } else {\n              // Do not wait for this recognizer to fail\n              otherRecognizer.dropRequireFailure(name);\n            }\n          });\n        }\n      }\n\n      this.wheelInput.enableEventType(name, enabled);\n      this.moveInput.enableEventType(name, enabled);\n      this.keyInput.enableEventType(name, enabled);\n      this.contextmenuInput.enableEventType(name, enabled);\n    }\n    /**\n     * Process the event registration for a single event + handler.\n     */\n\n  }, {\n    key: \"_addEventHandler\",\n    value: function _addEventHandler(event, handler, opts, once, passive) {\n      if (typeof event !== 'string') {\n        // @ts-ignore\n        opts = handler; // If `event` is a map, call `on()` for each entry.\n\n        for (var eventName in event) {\n          this._addEventHandler(eventName, event[eventName], opts, once, passive);\n        }\n\n        return;\n      }\n\n      var manager = this.manager,\n          events = this.events; // Alias to a recognized gesture as necessary.\n\n      var eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n      var eventRegistrar = events.get(eventAlias);\n\n      if (!eventRegistrar) {\n        eventRegistrar = new EventRegistrar(this);\n        events.set(eventAlias, eventRegistrar); // Enable recognizer for this event.\n\n        eventRegistrar.recognizerName = EVENT_RECOGNIZER_MAP[eventAlias] || eventAlias; // Listen to the event\n\n        if (manager) {\n          manager.on(eventAlias, eventRegistrar.handleEvent);\n        }\n      }\n\n      eventRegistrar.add(event, handler, opts, once, passive);\n\n      if (!eventRegistrar.isEmpty()) {\n        this._toggleRecognizer(eventRegistrar.recognizerName, true);\n      }\n    }\n    /**\n     * Process the event deregistration for a single event + handler.\n     */\n\n  }, {\n    key: \"_removeEventHandler\",\n    value: function _removeEventHandler(event, handler) {\n      if (typeof event !== 'string') {\n        // If `event` is a map, call `off()` for each entry.\n        for (var eventName in event) {\n          this._removeEventHandler(eventName, event[eventName]);\n        }\n\n        return;\n      }\n\n      var events = this.events; // Alias to a recognized gesture as necessary.\n\n      var eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n      var eventRegistrar = events.get(eventAlias);\n\n      if (!eventRegistrar) {\n        return;\n      }\n\n      eventRegistrar.remove(event, handler);\n\n      if (eventRegistrar.isEmpty()) {\n        var recognizerName = eventRegistrar.recognizerName; // Disable recognizer if no more handlers are attached to its events\n\n        var isRecognizerUsed = false;\n\n        var _iterator2 = _createForOfIteratorHelper(events.values()),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var eh = _step2.value;\n\n            if (eh.recognizerName === recognizerName && !eh.isEmpty()) {\n              isRecognizerUsed = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        if (!isRecognizerUsed) {\n          this._toggleRecognizer(recognizerName, false);\n        }\n      }\n    }\n  }]);\n\n  return EventManager;\n}();\n\nexport { EventManager as default };","map":{"version":3,"mappings":"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","names":["Manager","WheelInput","MoveInput","KeyInput","ContextmenuInput","EventRegistrar","BASIC_EVENT_ALIASES","EVENT_RECOGNIZER_MAP","GESTURE_EVENT_ALIASES","RECOGNIZERS","RECOGNIZER_COMPATIBLE_MAP","RECOGNIZER_FALLBACK_MAP","DEFAULT_OPTIONS","events","recognizers","recognizerOptions","touchAction","tabIndex","EventManager","element","options","event","srcEvent","alias","type","manager","emit","Map","setElement","on","destroy","ManagerClass","_onBasicInput","Object","keys","forEach","recognizer","get","name","recognizeWith","otherName","recognizerName","recognizerOption","enable","set","wheelInput","_onOtherEvent","moveInput","keyInput","contextmenuInput","eventAlias","eventRegistrar","isEmpty","_toggleRecognizer","handleEvent","handler","opts","_addEventHandler","_removeEventHandler","enabled","fallbackRecognizers","otherRecognizer","requireFailure","dropRequireFailure","enableEventType","once","passive","eventName","add","remove","isRecognizerUsed","values","eh"],"sourceRoot":"","sources":["../../src/event-manager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}