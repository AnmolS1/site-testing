{"ast":null,"code":"import _slicedToArray from \"/Users/anmolu/GitHub/testing-site/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { createMat4, transformVector, log2 } from './math-utils';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\nvar PI = Math.PI;\nvar PI_4 = PI / 4;\nvar DEGREES_TO_RADIANS = PI / 180;\nvar RADIANS_TO_DEGREES = 180 / PI;\nvar TILE_SIZE = 512;\nvar EARTH_CIRCUMFERENCE = 40.03e6;\nexport var MAX_LATITUDE = 85.051129;\nexport var DEFAULT_ALTITUDE = 1.5;\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\nexport function scaleToZoom(scale) {\n  return log2(scale);\n}\nexport function lngLatToWorld(lngLat) {\n  var _lngLat = _slicedToArray(lngLat, 2),\n      lng = _lngLat[0],\n      lat = _lngLat[1];\n\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n  var lambda2 = lng * DEGREES_TO_RADIANS;\n  var phi2 = lat * DEGREES_TO_RADIANS;\n  var x = TILE_SIZE * (lambda2 + PI) / (2 * PI);\n  var y = TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\nexport function worldToLngLat(xy) {\n  var _xy = _slicedToArray(xy, 2),\n      x = _xy[0],\n      y = _xy[1];\n\n  var lambda2 = x / TILE_SIZE * (2 * PI) - PI;\n  var phi2 = 2 * (Math.atan(Math.exp(y / TILE_SIZE * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\nexport function getMeterZoom(options) {\n  var latitude = options.latitude;\n  assert(Number.isFinite(latitude));\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\nexport function getDistanceScales(options) {\n  var latitude = options.latitude,\n      longitude = options.longitude,\n      _options$highPrecisio = options.highPrecision,\n      highPrecision = _options$highPrecisio === void 0 ? false : _options$highPrecisio;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n  var worldSize = TILE_SIZE;\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  var unitsPerDegreeX = worldSize / 360;\n  var unitsPerDegreeY = unitsPerDegreeX / latCosine;\n  var altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n  var result = {\n    unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],\n    metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],\n    unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],\n    degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]\n  };\n\n  if (highPrecision) {\n    var latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    var unitsPerDegreeY2 = unitsPerDegreeX * latCosine2 / 2;\n    var altUnitsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    var altUnitsPerMeter2 = altUnitsPerDegree2 / unitsPerDegreeY * altUnitsPerMeter;\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  return result;\n}\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  var _lngLatZ = _slicedToArray(lngLatZ, 3),\n      longitude = _lngLatZ[0],\n      latitude = _lngLatZ[1],\n      z0 = _lngLatZ[2];\n\n  var _xyz = _slicedToArray(xyz, 3),\n      x = _xyz[0],\n      y = _xyz[1],\n      z = _xyz[2];\n\n  var _getDistanceScales = getDistanceScales({\n    longitude: longitude,\n    latitude: latitude,\n    highPrecision: true\n  }),\n      unitsPerMeter = _getDistanceScales.unitsPerMeter,\n      unitsPerMeter2 = _getDistanceScales.unitsPerMeter2;\n\n  var worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n  var newLngLat = worldToLngLat(worldspace);\n  var newZ = (z0 || 0) + (z || 0);\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\nexport function getViewMatrix(options) {\n  var height = options.height,\n      pitch = options.pitch,\n      bearing = options.bearing,\n      altitude = options.altitude,\n      scale = options.scale,\n      center = options.center;\n  var vm = createMat4();\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n  var relativeScale = scale / height;\n  mat4.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\nexport function getProjectionParameters(options) {\n  var width = options.width,\n      height = options.height,\n      altitude = options.altitude,\n      _options$pitch = options.pitch,\n      pitch = _options$pitch === void 0 ? 0 : _options$pitch,\n      _options$nearZMultipl = options.nearZMultiplier,\n      nearZMultiplier = _options$nearZMultipl === void 0 ? 1 : _options$nearZMultipl,\n      _options$farZMultipli = options.farZMultiplier,\n      farZMultiplier = _options$farZMultipli === void 0 ? 1 : _options$farZMultipli;\n  var _options$fovy = options.fovy,\n      fovy = _options$fovy === void 0 ? altitudeToFovy(DEFAULT_ALTITUDE) : _options$fovy;\n\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n\n  var halfFov = 0.5 * fovy * DEGREES_TO_RADIANS;\n  var focalDistance = fovyToAltitude(fovy);\n  var pitchRadians = pitch * DEGREES_TO_RADIANS;\n  var topHalfSurfaceDistance = Math.sin(halfFov) * focalDistance / Math.sin(Math.min(Math.max(Math.PI / 2 - pitchRadians - halfFov, 0.01), Math.PI - 0.01));\n  var farZ = Math.sin(pitchRadians) * topHalfSurfaceDistance + focalDistance;\n  return {\n    fov: 2 * halfFov,\n    aspect: width / height,\n    focalDistance: focalDistance,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\nexport function getProjectionMatrix(options) {\n  var _getProjectionParamet = getProjectionParameters(options),\n      fov = _getProjectionParamet.fov,\n      aspect = _getProjectionParamet.aspect,\n      near = _getProjectionParamet.near,\n      far = _getProjectionParamet.far;\n\n  var projectionMatrix = mat4.perspective([], fov, aspect, near, far);\n  return projectionMatrix;\n}\nexport function altitudeToFovy(altitude) {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\nexport function fovyToAltitude(fovy) {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  var _xyz2 = _slicedToArray(xyz, 3),\n      x = _xyz2[0],\n      y = _xyz2[1],\n      _xyz2$ = _xyz2[2],\n      z = _xyz2$ === void 0 ? 0 : _xyz2$;\n\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix) {\n  var targetZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var _xyz3 = _slicedToArray(xyz, 3),\n      x = _xyz3[0],\n      y = _xyz3[1],\n      z = _xyz3[2];\n\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    var coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  var coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  var coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n  var z0 = coord0[2];\n  var z1 = coord1[2];\n  var t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}","map":{"version":3,"mappings":"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","names":["createMat4","transformVector","log2","mat4","vec2","vec3","assert","PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","MAX_LATITUDE","DEFAULT_ALTITUDE","zoomToScale","zoom","pow","scaleToZoom","scale","lngLatToWorld","lngLat","lng","lat","Number","isFinite","lambda2","phi2","x","y","log","tan","worldToLngLat","xy","atan","exp","getMeterZoom","options","latitude","latCosine","cos","getDistanceScales","longitude","highPrecision","worldSize","unitsPerDegreeX","unitsPerDegreeY","altUnitsPerMeter","result","unitsPerMeter","metersPerUnit","unitsPerDegree","degreesPerUnit","latCosine2","unitsPerDegreeY2","altUnitsPerDegree2","altUnitsPerMeter2","unitsPerDegree2","unitsPerMeter2","addMetersToLngLat","lngLatZ","xyz","z0","z","worldspace","newLngLat","newZ","getViewMatrix","height","pitch","bearing","altitude","center","vm","translate","rotateX","rotateZ","relativeScale","negate","getProjectionParameters","width","nearZMultiplier","farZMultiplier","fovy","altitudeToFovy","undefined","halfFov","focalDistance","fovyToAltitude","pitchRadians","topHalfSurfaceDistance","sin","min","max","farZ","fov","aspect","near","far","getProjectionMatrix","projectionMatrix","perspective","worldToPixels","pixelProjectionMatrix","pixelsToWorld","pixelUnprojectionMatrix","targetZ","coord","coord0","coord1","z1","t","lerp"],"sources":["../../src/web-mercator-utils.ts"],"sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector, log2} from './math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n// Latitude that makes a square world, 2 * atan(E ** PI) - PI / 2\nexport const MAX_LATITUDE = 85.051129;\n\n// Mapbox default altitude\nexport const DEFAULT_ALTITUDE = 1.5;\n\nexport type DistanceScales = {\n  unitsPerMeter: number[];\n  metersPerUnit: number[];\n  unitsPerMeter2?: number[];\n  unitsPerDegree: number[];\n  degreesPerUnit: number[];\n  unitsPerDegree2?: number[];\n};\n\n/**\n * PROJECTION MATRIX PARAMETERS\n *\n * TODO how to document mebers\n * @param fov in radians. fov is variable, depends on pitch and altitude\n * @param aspect width/height\n * @param focalDistance distance at which visual scale factor is 1\n * @param near near clipping plane\n * @param far far clipping plane\n */\ntype ProjectionParameters = {\n  fov: number;\n  aspect: number;\n  focalDistance: number;\n  near: number;\n  far: number;\n};\n\n/** Logarithimic zoom to linear scale **/\nexport function zoomToScale(zoom: number): number {\n  return Math.pow(2, zoom);\n}\n\n/** Linear scale to logarithimic zoom **/\nexport function scaleToZoom(scale: number): number {\n  return log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld(lngLat: number[]): [number, number] {\n  const [lng, lat] = lngLat;\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n  const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n  return [x, y];\n}\n\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param xy - array with [x,y] members\n *  representing point on projected map plane\n * @return - array with [x,y] of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat(xy: number[]): [number, number] {\n  const [x, y] = xy;\n  const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n/**\n * Returns the zoom level that gives a 1 meter pixel at a certain latitude\n * 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\n */\nexport function getMeterZoom(options: {latitude: number}): number {\n  const {latitude} = options;\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales(options: {\n  latitude: number;\n  longitude: number;\n  highPrecision?: boolean;\n}): DistanceScales {\n  const {latitude, longitude, highPrecision = false} = options;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  const result: DistanceScales = {\n    unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],\n    metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],\n\n    unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],\n    degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]\n  };\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n    const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n    const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n    const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ: number[], xyz: number[]): number[] {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const {unitsPerMeter, unitsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n/**\n *\n * view and projection matrix creation is intentionally kept compatible with\n * mapbox-gl's implementation to ensure that seamless interoperation\n * with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n */\nexport function getViewMatrix(options: {\n  // Viewport props\n  height: number;\n  pitch: number;\n  bearing: number;\n  altitude: number;\n  // Pre-calculated parameters\n  scale: number;\n  center?: number[];\n}): number[] {\n  const {\n    // Viewport props\n    height,\n    pitch,\n    bearing,\n    altitude,\n    // Pre-calculated parameters\n    scale,\n    center\n  } = options;\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  const relativeScale = scale / height;\n  mat4.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n/**\n * Calculates mapbox compatible projection matrix from parameters\n *\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns project parameters object\n */\nexport function getProjectionParameters(options: {\n  width: number;\n  height: number;\n  fovy?: number;\n  altitude?: number;\n  pitch?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n}): ProjectionParameters {\n  const {width, height, altitude, pitch = 0, nearZMultiplier = 1, farZMultiplier = 1} = options;\n  let {fovy = altitudeToFovy(DEFAULT_ALTITUDE)} = options;\n\n  // For back-compatibility allow field of view to be\n  // derived from altitude\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n  const halfFov = 0.5 * fovy * DEGREES_TO_RADIANS;\n  const focalDistance = fovyToAltitude(fovy);\n\n  // Find the distance from the center point to the center top\n  // in focal distance units using law of sines.\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const topHalfSurfaceDistance =\n    (Math.sin(halfFov) * focalDistance) /\n    Math.sin(Math.min(Math.max(Math.PI / 2 - pitchRadians - halfFov, 0.01), Math.PI - 0.01));\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.sin(pitchRadians) * topHalfSurfaceDistance + focalDistance;\n\n  return {\n    fov: 2 * halfFov,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\n\n/**\n * CALCULATE PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n *\n * To match mapbox's z buffer:\n *  - \\<= 0.28: nearZMultiplier: 0.1, farZmultiplier: 1\n *  - \\>= 0.29: nearZMultiplier: 1 / height, farZMultiplier: 1.01\n *\n * @param options Viewport options\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns 4x4 projection matrix\n */\nexport function getProjectionMatrix(options: {\n  width: number;\n  height: number;\n  pitch: number;\n  fovy?: number;\n  altitude?: number;\n  nearZMultiplier: number;\n  farZMultiplier: number;\n}): number[] {\n  const {fov, aspect, near, far} = getProjectionParameters(options);\n\n  const projectionMatrix = mat4.perspective(\n    [] as number[],\n    fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n  );\n\n  return projectionMatrix;\n}\n\n/**\n *\n * Convert an altitude to field of view such that the\n * focal distance is equal to the altitude\n *\n * @param altitude - altitude of camera in screen units\n * @return fovy field of view in degrees\n */\nexport function altitudeToFovy(altitude: number): number {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\n\n/**\n *\n * Convert an field of view such that the\n * focal distance is equal to the altitude\n *\n * @param fovy - field of view in degrees\n * @return altitude altitude of camera in screen units\n */\nexport function fovyToAltitude(fovy: number): number {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\n\n/**\n * Project flat coordinates to pixels on screen.\n *\n * @param xyz - flat coordinate on 512*512 Mercator Zoom 0 tile\n * @param pixelProjectionMatrix - projection matrix 4x4\n * @return [x, y, depth] pixel coordinate on screen.\n */\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[];\n\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz: number[], pixelProjectionMatrix: number[]): number[] {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param xyz - pixel coordinate on screen.\n * @param pixelUnprojectionMatrix - unprojection matrix 4x4\n * @param targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(\n  xyz: number[],\n  pixelUnprojectionMatrix: number[],\n  targetZ: number = 0\n): number[] {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([] as number[], coord0, coord1, t);\n}\n"]},"metadata":{},"sourceType":"module"}